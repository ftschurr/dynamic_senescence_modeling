pheno_description <- read.csv("O:/Projects/KP0030_ftschurr/GIT_repos/package_dymenv_prep/meta/crop_pheno_phase_description_DWD.csv")
granularity <- "daily"
variables <- c("tas","global_radiation","tasmin","tasmax","SPI","VPD","RH")
data_combiner <- function(station, variable,granularity,path_variable, year_envs_reps, phase_start_id, phase_end_id){
one_station_list <- list()
path_env_file <- paste0(path_variable,"/station_",station,"_",variable,"_",granularity,".csv")
one_env <- read.csv(path_env_file)
# one_env$timestamp <- as.POSIXct(one_env$timestamp)
one_env$timestamp <- as.Date(one_env$timestamp)
if(granularity=="hourly"){
gapfilling_length <- 110
}else if(granularity =="daily"){
gapfilling_length <- 4
}
# one_env[[variable]] <- gap_filling_linear(one_env[[variable]], max_gap_length = gapfilling_length)
year_reps <- which(substr(names(year_envs_reps), start = 1, stop=nchar(names(year_envs_reps))-5) == station)
for(yr in year_reps){
if(granularity == "daily"){
start_date <- as.Date(year_envs_reps[[yr]][which(year_envs_reps[[yr]]$Phase_id == phase_start_id),"Eintrittsdatum"])
end_date <- as.Date(year_envs_reps[[yr]][which(year_envs_reps[[yr]]$Phase_id == phase_end_id),"Eintrittsdatum"])
one_env$timestamp <- as.Date(one_env$timestamp)
timespan <- which(one_env$timestamp >= start_date & one_env$timestamp<=end_date)
}else if(granularity =="hourly"){
start_date <- year_envs_reps[[yr]][which(year_envs_reps[[yr]]$Phase_id == phase_start_id),"Eintrittsdatum"]
end_date <- year_envs_reps[[yr]][which(year_envs_reps[[yr]]$Phase_id == phase_end_id),"Eintrittsdatum"]
timespan <- which(one_env$timestamp >= start_date & one_env$timestamp<=end_date)
}
if(length(which(is.na(one_env[[variable]][timespan]))== FALSE)<= length(timespan)/2 & length(timespan)>0){
if(length(which(is.na(one_env[[variable]][timespan]))) >= length(one_env[[variable]][timespan])-1){return(NULL)}
gapfilled <- gap_filling_linear(one_env[[variable]][timespan], max_gap_length = gapfilling_length)
one_station_list[[names(year_envs_reps)[yr]]] <-gapfilled
# one_station_list[[names(year_envs_reps)[yr]]] <- one_env[[variable]]
}
}
# browser()
return(one_station_list)
# }
}
for (crop_abbrev in crop_abbrevs) {
print(crop_abbrev)
pheno_data <- read.csv(paste(path_data,"phenology/DWD_multiple_crops_phenology/",paste0("DWD_",crop_abbrev,"_2023.csv"),sep="/"), header=T, sep=",")
pheno_data$Eintrittsdatum <- as.Date(strptime(pheno_data$Eintrittsdatum, format="%Y%m%d"))
one_crop <-subset(pheno_description, abbrev == crop_abbrev)
for(pheno_ph in one_crop$pheno_ph){
# year_envs_reps <- readRDS(paste(path_data,paste0("year_envs_reps_wheat_phenology_DWD_",pheno_phase,".rds"),sep="/"))
one_phase <- subset(one_crop, pheno_phase == pheno_ph )
phase_start_id <- one_phase$start_pheno_phase_id
phase_end_id <- one_phase$end_pheno_phase_id
out_list <- list()
stations <- unique(pheno_data$Stations_id)
for(station in stations){
one_stat <- subset(pheno_data, Stations_id == station)
# browser()
one_stat <- one_stat[order(one_stat$Eintrittsdatum),]
potential_starts <- which(one_stat$Phase_id == phase_start_id)
for(pot_start in potential_starts){
pot_start_date <- one_stat$Eintrittsdatum[pot_start]
one_veg_period <- subset(one_stat, Eintrittsdatum >= pot_start_date & Eintrittsdatum < pot_start_date+300)
if(phase_start_id %in% one_veg_period$Phase_id && phase_end_id %in% one_veg_period$Phase_id){
yr <- year(pot_start_date)
out_list[[paste(station,yr,sep="_")]] <- one_veg_period
}
}
}
year_envs_reps <- out_list
saveRDS(year_envs_reps,paste(path_data,"phenology/DWD_multiple_crops_phenology/",paste0("year_envs_reps_",crop_abbrev,"_phenology_DWD",pheno_ph,".rds"),sep="/"))
for(variable in variables){
one_variable_list <- list()
# path_variable <- paste(path_data,"climate",granularity,variable,sep="/")
path_variable <- paste(path_data,"climate_DWD_and_JRC",granularity,variable,sep="/")
available_stations <- na.omit(as.numeric(unlist(str_split(pattern="_", list.files(path_variable))),suppressWarnings=T))
pheno_stations <- as.numeric(substr(names(year_envs_reps),start=1, stop=nchar(names(year_envs_reps))-5))
subset_pheno <- pheno_stations[which(pheno_stations %in% available_stations)]
start_time <- Sys.time()
# one_variable_list <- parLapply(cl,
#                                unique(subset_pheno),
#                             data_combiner,
#                             variable = variable,
#                             granularity = granularity,
#                             path_variable = path_variable,
#                             year_envs_reps = year_envs_reps,
#                             phase_start_id = phase_start_id,
#                             phase_end_id = phase_end_id)
one_variable_list <- lapply(unique(subset_pheno),
data_combiner,
variable = variable,
granularity = granularity,
path_variable = path_variable,
year_envs_reps = year_envs_reps,
phase_start_id = phase_start_id,
phase_end_id = phase_end_id)
end_time <- Sys.time()
print(end_time - start_time)
# filter out NULLs
one_variable_list <- Filter(function(x) length(x) > 0, one_variable_list)
variable_restructured <- list()
for(i in 1:length(one_variable_list)){
for(name in names(one_variable_list[[i]]) ){
variable_restructured[[name]] <- one_variable_list[[i]][[name]]
}
}
out_path <- paste(path_data,"climate_phenology_package", sep="/")
dir.create(out_path,showWarnings = F, recursive = T)
saveRDS(variable_restructured,paste(out_path,paste0(variable,"_",granularity,"_",crop_abbrev,"_phenology_",pheno_ph,".rds"),sep="/"))
}
# create a training and validation set
intersect_all <- function(a,b,...){
Reduce(intersect, list(a,b,...))
}
names_list <- list()
for(variable in variables){
whole_data <- readRDS(paste(out_path,paste0(variable,"_",granularity,"_",crop_abbrev,"_phenology_",pheno_ph,".rds"),sep="/"))
names_list[[variable]] <- names(whole_data)
rm(whole_data)
}
# intersect_all(names(variable_restructured),names(whole_data))
common_envs <- Reduce(intersect, names_list)
sample_size =0.2
# validation <- sample(names(whole_data), size=length(names(whole_data))*sample_size)
validation <- sample(common_envs, size=length(common_envs)*sample_size)
for(variable in variables){
whole_data <- readRDS(paste(out_path,paste0(variable,"_",granularity,"_",crop_abbrev,"_phenology_",pheno_ph,".rds"),sep="/"))
validation_data <- whole_data[validation[which(validation %in% names(whole_data))]]
# training_data <- whole_data[-validation[which(validation %in% names(whole_data))]]
training_data <- whole_data[base::setdiff( names(whole_data), validation)]
saveRDS(validation_data,paste(out_path,paste0(variable,"_",granularity,"_validation_dataset_",crop_abbrev,"_phenology_",pheno_ph,".rds"),sep="/"))
saveRDS(training_data,paste(out_path,paste0(variable,"_",granularity,"_training_dataset_",crop_abbrev,"_phenology_",pheno_ph,".rds"),sep="/"))
}
}
}
library(parallel)
# data path
path_data <- "O:/Projects/KP0030_ftschurr/data/DWD_2023/historic"
source("P:/Evaluation/Projects/KP0030_ftschurr/GIT_repos/DyMEnvModel_paper/scripts/functions/FUN_utils.R")
library(stringr)
library(lubridate)
crop_abbrevs <- c("GB","GP","MZ","OAT","RS","SB","SW","WB","WR")
crop_abbrevs <- c("OAT","RS","SB","SW","WB","WR")
crob_abbrevs <- c("OAT")
pheno_description <- read.csv("O:/Projects/KP0030_ftschurr/GIT_repos/package_dymenv_prep/meta/crop_pheno_phase_description_DWD.csv")
granularity <- "daily"
variables <- c("tas","global_radiation","tasmin","tasmax","SPI","VPD","RH")
data_combiner <- function(station, variable,granularity,path_variable, year_envs_reps, phase_start_id, phase_end_id){
one_station_list <- list()
path_env_file <- paste0(path_variable,"/station_",station,"_",variable,"_",granularity,".csv")
one_env <- read.csv(path_env_file)
# one_env$timestamp <- as.POSIXct(one_env$timestamp)
one_env$timestamp <- as.Date(one_env$timestamp)
if(granularity=="hourly"){
gapfilling_length <- 110
}else if(granularity =="daily"){
gapfilling_length <- 4
}
# one_env[[variable]] <- gap_filling_linear(one_env[[variable]], max_gap_length = gapfilling_length)
year_reps <- which(substr(names(year_envs_reps), start = 1, stop=nchar(names(year_envs_reps))-5) == station)
for(yr in year_reps){
if(granularity == "daily"){
start_date <- as.Date(year_envs_reps[[yr]][which(year_envs_reps[[yr]]$Phase_id == phase_start_id),"Eintrittsdatum"])
end_date <- as.Date(year_envs_reps[[yr]][which(year_envs_reps[[yr]]$Phase_id == phase_end_id),"Eintrittsdatum"])
one_env$timestamp <- as.Date(one_env$timestamp)
timespan <- which(one_env$timestamp >= start_date & one_env$timestamp<=end_date)
}else if(granularity =="hourly"){
start_date <- year_envs_reps[[yr]][which(year_envs_reps[[yr]]$Phase_id == phase_start_id),"Eintrittsdatum"]
end_date <- year_envs_reps[[yr]][which(year_envs_reps[[yr]]$Phase_id == phase_end_id),"Eintrittsdatum"]
timespan <- which(one_env$timestamp >= start_date & one_env$timestamp<=end_date)
}
if(length(which(is.na(one_env[[variable]][timespan]))== FALSE)<= length(timespan)/2 & length(timespan)>0){
if(length(which(is.na(one_env[[variable]][timespan]))) >= length(one_env[[variable]][timespan])-1){return(NULL)}
gapfilled <- gap_filling_linear(one_env[[variable]][timespan], max_gap_length = gapfilling_length)
one_station_list[[names(year_envs_reps)[yr]]] <-gapfilled
# one_station_list[[names(year_envs_reps)[yr]]] <- one_env[[variable]]
}
}
# browser()
return(one_station_list)
# }
}
for (crop_abbrev in crop_abbrevs) {
print(crop_abbrev)
pheno_data <- read.csv(paste(path_data,"phenology/DWD_multiple_crops_phenology/",paste0("DWD_",crop_abbrev,"_2023.csv"),sep="/"), header=T, sep=",")
pheno_data$Eintrittsdatum <- as.Date(strptime(pheno_data$Eintrittsdatum, format="%Y%m%d"))
one_crop <-subset(pheno_description, abbrev == crop_abbrev)
browser()
for(pheno_ph in one_crop$pheno_ph){
# year_envs_reps <- readRDS(paste(path_data,paste0("year_envs_reps_wheat_phenology_DWD_",pheno_phase,".rds"),sep="/"))
one_phase <- subset(one_crop, pheno_phase == pheno_ph )
phase_start_id <- one_phase$start_pheno_phase_id
phase_end_id <- one_phase$end_pheno_phase_id
out_list <- list()
stations <- unique(pheno_data$Stations_id)
for(station in stations){
one_stat <- subset(pheno_data, Stations_id == station)
# browser()
one_stat <- one_stat[order(one_stat$Eintrittsdatum),]
potential_starts <- which(one_stat$Phase_id == phase_start_id)
for(pot_start in potential_starts){
pot_start_date <- one_stat$Eintrittsdatum[pot_start]
one_veg_period <- subset(one_stat, Eintrittsdatum >= pot_start_date & Eintrittsdatum < pot_start_date+300)
if(phase_start_id %in% one_veg_period$Phase_id && phase_end_id %in% one_veg_period$Phase_id){
yr <- year(pot_start_date)
out_list[[paste(station,yr,sep="_")]] <- one_veg_period
}
}
}
year_envs_reps <- out_list
saveRDS(year_envs_reps,paste(path_data,"phenology/DWD_multiple_crops_phenology/",paste0("year_envs_reps_",crop_abbrev,"_phenology_DWD_",pheno_ph,".rds"),sep="/"))
for(variable in variables){
one_variable_list <- list()
# path_variable <- paste(path_data,"climate",granularity,variable,sep="/")
path_variable <- paste(path_data,"climate_DWD_and_JRC",granularity,variable,sep="/")
available_stations <- na.omit(as.numeric(unlist(str_split(pattern="_", list.files(path_variable))),suppressWarnings=T))
pheno_stations <- as.numeric(substr(names(year_envs_reps),start=1, stop=nchar(names(year_envs_reps))-5))
subset_pheno <- pheno_stations[which(pheno_stations %in% available_stations)]
start_time <- Sys.time()
# one_variable_list <- parLapply(cl,
#                                unique(subset_pheno),
#                             data_combiner,
#                             variable = variable,
#                             granularity = granularity,
#                             path_variable = path_variable,
#                             year_envs_reps = year_envs_reps,
#                             phase_start_id = phase_start_id,
#                             phase_end_id = phase_end_id)
one_variable_list <- lapply(unique(subset_pheno),
data_combiner,
variable = variable,
granularity = granularity,
path_variable = path_variable,
year_envs_reps = year_envs_reps,
phase_start_id = phase_start_id,
phase_end_id = phase_end_id)
end_time <- Sys.time()
print(end_time - start_time)
# filter out NULLs
one_variable_list <- Filter(function(x) length(x) > 0, one_variable_list)
variable_restructured <- list()
for(i in 1:length(one_variable_list)){
for(name in names(one_variable_list[[i]]) ){
variable_restructured[[name]] <- one_variable_list[[i]][[name]]
}
}
out_path <- paste(path_data,"climate_phenology_package", sep="/")
dir.create(out_path,showWarnings = F, recursive = T)
saveRDS(variable_restructured,paste(out_path,paste0(variable,"_",granularity,"_",crop_abbrev,"_phenology_",pheno_ph,".rds"),sep="/"))
}
# create a training and validation set
intersect_all <- function(a,b,...){
Reduce(intersect, list(a,b,...))
}
names_list <- list()
for(variable in variables){
whole_data <- readRDS(paste(out_path,paste0(variable,"_",granularity,"_",crop_abbrev,"_phenology_",pheno_ph,".rds"),sep="/"))
names_list[[variable]] <- names(whole_data)
rm(whole_data)
}
# intersect_all(names(variable_restructured),names(whole_data))
common_envs <- Reduce(intersect, names_list)
sample_size =0.2
# validation <- sample(names(whole_data), size=length(names(whole_data))*sample_size)
validation <- sample(common_envs, size=length(common_envs)*sample_size)
for(variable in variables){
whole_data <- readRDS(paste(out_path,paste0(variable,"_",granularity,"_",crop_abbrev,"_phenology_",pheno_ph,".rds"),sep="/"))
validation_data <- whole_data[validation[which(validation %in% names(whole_data))]]
# training_data <- whole_data[-validation[which(validation %in% names(whole_data))]]
training_data <- whole_data[base::setdiff( names(whole_data), validation)]
saveRDS(validation_data,paste(out_path,paste0(variable,"_",granularity,"_validation_dataset_",crop_abbrev,"_phenology_",pheno_ph,".rds"),sep="/"))
saveRDS(training_data,paste(out_path,paste0(variable,"_",granularity,"_training_dataset_",crop_abbrev,"_phenology_",pheno_ph,".rds"),sep="/"))
}
}
}
one_crop$pheno_ph
for (crop_abbrev in crop_abbrevs) {
print(crop_abbrev)
pheno_data <- read.csv(paste(path_data,"phenology/DWD_multiple_crops_phenology/",paste0("DWD_",crop_abbrev,"_2023.csv"),sep="/"), header=T, sep=",")
pheno_data$Eintrittsdatum <- as.Date(strptime(pheno_data$Eintrittsdatum, format="%Y%m%d"))
one_crop <-subset(pheno_description, abbrev == crop_abbrev)
browser()
for(pheno_ph in one_crop$pheno_ph){
# year_envs_reps <- readRDS(paste(path_data,paste0("year_envs_reps_wheat_phenology_DWD_",pheno_phase,".rds"),sep="/"))
print(pheno_ph)
if(pheno_ph %in% c("sowing-emergence" ,  "emergence-booting" )){
next
}
one_phase <- subset(one_crop, pheno_phase == pheno_ph )
phase_start_id <- one_phase$start_pheno_phase_id
phase_end_id <- one_phase$end_pheno_phase_id
out_list <- list()
stations <- unique(pheno_data$Stations_id)
for(station in stations){
one_stat <- subset(pheno_data, Stations_id == station)
# browser()
one_stat <- one_stat[order(one_stat$Eintrittsdatum),]
potential_starts <- which(one_stat$Phase_id == phase_start_id)
for(pot_start in potential_starts){
pot_start_date <- one_stat$Eintrittsdatum[pot_start]
one_veg_period <- subset(one_stat, Eintrittsdatum >= pot_start_date & Eintrittsdatum < pot_start_date+300)
if(phase_start_id %in% one_veg_period$Phase_id && phase_end_id %in% one_veg_period$Phase_id){
yr <- year(pot_start_date)
out_list[[paste(station,yr,sep="_")]] <- one_veg_period
}
}
}
year_envs_reps <- out_list
saveRDS(year_envs_reps,paste(path_data,"phenology/DWD_multiple_crops_phenology/",paste0("year_envs_reps_",crop_abbrev,"_phenology_DWD_",pheno_ph,".rds"),sep="/"))
for(variable in variables){
one_variable_list <- list()
# path_variable <- paste(path_data,"climate",granularity,variable,sep="/")
path_variable <- paste(path_data,"climate_DWD_and_JRC",granularity,variable,sep="/")
available_stations <- na.omit(as.numeric(unlist(str_split(pattern="_", list.files(path_variable))),suppressWarnings=T))
pheno_stations <- as.numeric(substr(names(year_envs_reps),start=1, stop=nchar(names(year_envs_reps))-5))
subset_pheno <- pheno_stations[which(pheno_stations %in% available_stations)]
start_time <- Sys.time()
# one_variable_list <- parLapply(cl,
#                                unique(subset_pheno),
#                             data_combiner,
#                             variable = variable,
#                             granularity = granularity,
#                             path_variable = path_variable,
#                             year_envs_reps = year_envs_reps,
#                             phase_start_id = phase_start_id,
#                             phase_end_id = phase_end_id)
one_variable_list <- lapply(unique(subset_pheno),
data_combiner,
variable = variable,
granularity = granularity,
path_variable = path_variable,
year_envs_reps = year_envs_reps,
phase_start_id = phase_start_id,
phase_end_id = phase_end_id)
end_time <- Sys.time()
print(end_time - start_time)
# filter out NULLs
one_variable_list <- Filter(function(x) length(x) > 0, one_variable_list)
variable_restructured <- list()
for(i in 1:length(one_variable_list)){
for(name in names(one_variable_list[[i]]) ){
variable_restructured[[name]] <- one_variable_list[[i]][[name]]
}
}
out_path <- paste(path_data,"climate_phenology_package", sep="/")
dir.create(out_path,showWarnings = F, recursive = T)
saveRDS(variable_restructured,paste(out_path,paste0(variable,"_",granularity,"_",crop_abbrev,"_phenology_",pheno_ph,".rds"),sep="/"))
}
# create a training and validation set
intersect_all <- function(a,b,...){
Reduce(intersect, list(a,b,...))
}
names_list <- list()
for(variable in variables){
whole_data <- readRDS(paste(out_path,paste0(variable,"_",granularity,"_",crop_abbrev,"_phenology_",pheno_ph,".rds"),sep="/"))
names_list[[variable]] <- names(whole_data)
rm(whole_data)
}
# intersect_all(names(variable_restructured),names(whole_data))
common_envs <- Reduce(intersect, names_list)
sample_size =0.2
# validation <- sample(names(whole_data), size=length(names(whole_data))*sample_size)
validation <- sample(common_envs, size=length(common_envs)*sample_size)
for(variable in variables){
whole_data <- readRDS(paste(out_path,paste0(variable,"_",granularity,"_",crop_abbrev,"_phenology_",pheno_ph,".rds"),sep="/"))
validation_data <- whole_data[validation[which(validation %in% names(whole_data))]]
# training_data <- whole_data[-validation[which(validation %in% names(whole_data))]]
training_data <- whole_data[base::setdiff( names(whole_data), validation)]
saveRDS(validation_data,paste(out_path,paste0(variable,"_",granularity,"_validation_dataset_",crop_abbrev,"_phenology_",pheno_ph,".rds"),sep="/"))
saveRDS(training_data,paste(out_path,paste0(variable,"_",granularity,"_training_dataset_",crop_abbrev,"_phenology_",pheno_ph,".rds"),sep="/"))
}
}
}
for (crop_abbrev in crop_abbrevs) {
print(crop_abbrev)
pheno_data <- read.csv(paste(path_data,"phenology/DWD_multiple_crops_phenology/",paste0("DWD_",crop_abbrev,"_2023.csv"),sep="/"), header=T, sep=",")
pheno_data$Eintrittsdatum <- as.Date(strptime(pheno_data$Eintrittsdatum, format="%Y%m%d"))
one_crop <-subset(pheno_description, abbrev == crop_abbrev)
for(pheno_ph in one_crop$pheno_ph){
# year_envs_reps <- readRDS(paste(path_data,paste0("year_envs_reps_wheat_phenology_DWD_",pheno_phase,".rds"),sep="/"))
print(pheno_ph)
if(pheno_ph %in% c("sowing-emergence" ,  "emergence-booting" )){
next
}
one_phase <- subset(one_crop, pheno_phase == pheno_ph )
phase_start_id <- one_phase$start_pheno_phase_id
phase_end_id <- one_phase$end_pheno_phase_id
out_list <- list()
stations <- unique(pheno_data$Stations_id)
for(station in stations){
one_stat <- subset(pheno_data, Stations_id == station)
# browser()
one_stat <- one_stat[order(one_stat$Eintrittsdatum),]
potential_starts <- which(one_stat$Phase_id == phase_start_id)
for(pot_start in potential_starts){
pot_start_date <- one_stat$Eintrittsdatum[pot_start]
one_veg_period <- subset(one_stat, Eintrittsdatum >= pot_start_date & Eintrittsdatum < pot_start_date+300)
if(phase_start_id %in% one_veg_period$Phase_id && phase_end_id %in% one_veg_period$Phase_id){
yr <- year(pot_start_date)
out_list[[paste(station,yr,sep="_")]] <- one_veg_period
}
}
}
year_envs_reps <- out_list
saveRDS(year_envs_reps,paste(path_data,"phenology/DWD_multiple_crops_phenology/",paste0("year_envs_reps_",crop_abbrev,"_phenology_DWD_",pheno_ph,".rds"),sep="/"))
for(variable in variables){
one_variable_list <- list()
# path_variable <- paste(path_data,"climate",granularity,variable,sep="/")
path_variable <- paste(path_data,"climate_DWD_and_JRC",granularity,variable,sep="/")
available_stations <- na.omit(as.numeric(unlist(str_split(pattern="_", list.files(path_variable))),suppressWarnings=T))
pheno_stations <- as.numeric(substr(names(year_envs_reps),start=1, stop=nchar(names(year_envs_reps))-5))
subset_pheno <- pheno_stations[which(pheno_stations %in% available_stations)]
start_time <- Sys.time()
# one_variable_list <- parLapply(cl,
#                                unique(subset_pheno),
#                             data_combiner,
#                             variable = variable,
#                             granularity = granularity,
#                             path_variable = path_variable,
#                             year_envs_reps = year_envs_reps,
#                             phase_start_id = phase_start_id,
#                             phase_end_id = phase_end_id)
one_variable_list <- lapply(unique(subset_pheno),
data_combiner,
variable = variable,
granularity = granularity,
path_variable = path_variable,
year_envs_reps = year_envs_reps,
phase_start_id = phase_start_id,
phase_end_id = phase_end_id)
end_time <- Sys.time()
print(end_time - start_time)
# filter out NULLs
one_variable_list <- Filter(function(x) length(x) > 0, one_variable_list)
variable_restructured <- list()
for(i in 1:length(one_variable_list)){
for(name in names(one_variable_list[[i]]) ){
variable_restructured[[name]] <- one_variable_list[[i]][[name]]
}
}
out_path <- paste(path_data,"climate_phenology_package", sep="/")
dir.create(out_path,showWarnings = F, recursive = T)
saveRDS(variable_restructured,paste(out_path,paste0(variable,"_",granularity,"_",crop_abbrev,"_phenology_",pheno_ph,".rds"),sep="/"))
}
# create a training and validation set
intersect_all <- function(a,b,...){
Reduce(intersect, list(a,b,...))
}
names_list <- list()
for(variable in variables){
whole_data <- readRDS(paste(out_path,paste0(variable,"_",granularity,"_",crop_abbrev,"_phenology_",pheno_ph,".rds"),sep="/"))
names_list[[variable]] <- names(whole_data)
rm(whole_data)
}
# intersect_all(names(variable_restructured),names(whole_data))
common_envs <- Reduce(intersect, names_list)
sample_size =0.2
# validation <- sample(names(whole_data), size=length(names(whole_data))*sample_size)
validation <- sample(common_envs, size=length(common_envs)*sample_size)
for(variable in variables){
whole_data <- readRDS(paste(out_path,paste0(variable,"_",granularity,"_",crop_abbrev,"_phenology_",pheno_ph,".rds"),sep="/"))
validation_data <- whole_data[validation[which(validation %in% names(whole_data))]]
# training_data <- whole_data[-validation[which(validation %in% names(whole_data))]]
training_data <- whole_data[base::setdiff( names(whole_data), validation)]
saveRDS(validation_data,paste(out_path,paste0(variable,"_",granularity,"_validation_dataset_",crop_abbrev,"_phenology_",pheno_ph,".rds"),sep="/"))
saveRDS(training_data,paste(out_path,paste0(variable,"_",granularity,"_training_dataset_",crop_abbrev,"_phenology_",pheno_ph,".rds"),sep="/"))
}
}
}
rm(list = ls())
.libPaths("T:/R4UserLibs")
list.of.packages <- c("tidyverse", "mvoutlier", "data.table",
"ggsci", "ggpubr", "doParallel", "foreach", "nls.multstart",
"scam")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages, dependencies = TRUE, repos = 'https://stat.ethz.ch/CRAN/')
library(tidyverse)
library(data.table)
library(foreach)
library(doParallel)
library(nls.multstart)
library(scam)
library(progress)
library(R.utils)
library(ggpubr)
library(ggsci)
workdir <- "P:/Evaluation/Projects/KP0030_ftschurr/GIT_repos/dynamic_senescence_modeling"
setwd(workdir)
# set working directory
path_to_data <- file.path(workdir,"data")
path_to_funcs <- file.path(workdir,"R")
# load functions
source(paste0(path_to_funcs, "A_Utils.R"))
source(paste0(path_to_funcs, "B_Helpers.R"))
git_dir <- "P:/Evaluation/Projects/KP0030_ftschurr/GIT_repos/dynamic_senescence_modeling"
# set working directory
path_to_data <- file.path(git_dir,"data")
path_to_funcs <- file.path(git_dir,"R")
# load functions
source(paste0(path_to_funcs, "A_Utils.R"))
# load functions
source(file.path(path_to_funcs, "A_Utils.R"))
source(file.path(path_to_funcs, "B_Helpers.R"))
setwd(path_to_data)
# RGB
files_rgb_example <- list.files("RGB_example", pattern = ".csv", full.names = T)
files_rgb_example
# SPC
files_spc_example <- list.files("SPC_example", pattern = "_LM.csv", full.names = T)
files_spc_example
# gather all
files <- c(files_rgb_example, files_spc_example)
# set up cluster and iterate over the output files
detectCores()
# set up cluster and iterate over the output files
numCors <- round(detectCores()*0.8)
numCors
